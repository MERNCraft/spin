@counter-style fruit-one {
  system: cyclic;
  symbols:
"🍇" "🍈" "🍉" "🍒" "🍊" "🍋" "🍍" "🥭" "🍎" "🍏" "🍐" "🍑" "🍌" "🍓" "🫐" "🥝" "🍅" "🥥";
  suffix: "";
}

@counter-style fruit-two {
  system: cyclic;
  symbols:
"🫐" "🍐" "🍈" "🍒" "🥥" "🍑" "🍍" "🍋" "🥝" "🍎" "🍓" "🍉" "🍊" "🍌" "🥭" "🍇" "🍏" "🍅";
  suffix: "";
}

@counter-style fruit-three {
  system: cyclic;
  symbols:
"🫐" "🍏" "🍇" "🍒" "🍑" "🥥" "🥝" "🍌" "🍈" "🍓" "🍊" "🍎" "🍅" "🍋" "🍐" "🍉" "🍍" "🥭";
  suffix: "";
}

@counter-style mood {
  system: cyclic;
  symbols: "😔" "😞" "🙁" "😕" "🙂" "😀" "😄" "😁" "😊";
  suffix: ""
}

:root {
  font-family: Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  
  --light: #ddd;
  --mid: #888;
  --dark: #222;
  --primary: #060;
  --primary-border: #393;
  --primary-active: #030;

  --gap: 0.5em;

  /* How many symbols are there in the counter style? */
  --total: 18;
  /* How what angle does each li cover around a full circle? */
  --arc: calc(360 / var(--total));

  --size: 25px;
  --half: calc(0.22 * var(--size)); /* include kludge value */
  --girth: calc(var(--total) * var(--size) * 1.5);
  --diameter: calc(var(--girth) / 3.1415962);
  --radius: calc(var(--diameter) / 2 - 3px); /* minus kludge */
  --reel:  110px;
  --shift: calc(var(--radius) - var(--half));
  --raise: calc(var(--reel) / 2 - var(--radius) - 12px);
  --drum: linear-gradient(
    0deg,
    #000   0%,
    #fff  50%,
    #000 100%
  );
  --shadow: linear-gradient(
    0deg,
    #0009   0%,
    #fff0  50%,
    #0009 100%
  );

  --one: spin; 
  --two: spin; 
  --three: spin;

  counter-set: mood 5;
}

body {
  margin: 0;
  padding: 0;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 16px;

  color: var(--light);
  background-color: var(--dark);
}

main {
  position: relative;
  width: 300px;
  height: 150px;
  background-color: #030;
  /* overflow: hidden; */
}

main,
.reels {
  border: 1px solid #fff;
  border-radius: 8px;
  box-sizing: border-box;
}

div.reels {
  display: flex;
  position: absolute;
  top: 5px;
  left: 73px;

  width: 150px;
  height: var(--reel);
  overflow: hidden;
}

div.bar {
  position: absolute;
  --inset: 30px;
  --bar: 3px;
  left: 0;
  right: 0;
  top: var(--inset);
  bottom: var(--inset);
  background-color: #0000;
  border: 0 solid #f90;
  border-top-width: var(--bar);
  border-bottom-width: var(--bar);
  filter: drop-shadow( 0px 2px 2px #0009)
}


/* BUTTONS / BUTTONS / BUTTONS / BUTTONS / BUTTONS / BUTTONS */
input {
  position: absolute;
  left: -99vw;
}

div.buttons {
  position: absolute;
  bottom: 4px;
  left: 73px;
  display: flex;
  justify-content: space-between;
  width: 150px;
}

div.buttons button {
  flex: 1
}

.button {
  border: 1px outset var(--mid);
  border-radius: var(--gap);
  padding: 0 var(--gap);
}

button:not(:disabled),
.button:not(:disabled) {
  cursor: pointer;
}

button:hover,
.button:hover {
  color: #fff;
}

button:hover:active,
.button:hover:active {
  border-style: inset;
  background-color: #000;
}

button.pressed,
.button.pressed {
  color: #fff;
  border-style: inset;
  background-color: #000;
}

button.primary,
.button.primary {
  background-color: var(--primary);
  border-color: var(--primary-border);
}

button.primary:active:hover,
.button.primary:active:hover {
  background-color: var(--primary-active);
}


ol {
  position: absolute;
  top: var(--raise);
}

ol.one {
  /* The drum will rotate, starting at an angle of 0.
   * An animation will change this value.
   */
  --angle: 0;

  /* Ignore completed whole rotations */
  --trim: mod(var(--angle), 360);
  /* If each symbol is in a position from 0 <= place < 20,
   * where is the first symbol now?
   */
  --place: calc(var(--trim) / var(--arc));
  /* What fraction of a symbol size has it moved past the last
   * resting symbol position?
   */
  --fraction: mod(var(--place), 1);
  /* How many complete symbol positions has it moved? */
  --turn:  calc(var(--place) - var(--fraction));
  /* What angle of rotation does this fraction represent? */
  --twist: calc(var(--fraction) * var(--arc));
  /* What index number should the list start with, in order to
   * push the first symbol into its --turn position?
   */
  --first: mod(
    calc(var(--total) - var(--turn)), var(--total)
  );

  /* animation-duration: 8s; */

  li::before {
    content: counter(index, fruit-one);
  }
}
html:has(#two:checked):has(#three:checked) {
  --one: final
}
html:has(#one:checked):has(#three:checked) {
  --two: final
}
html:has(#one:checked):has(#two:checked) {
  --three: final
}
.buttons:has(#one:checked) ~ .reels .one {
  animation-name: var(--one);
}

input:checked + span {
  background-color: red;
}


ol.two {
  /* The drum will rotate, starting at an angle of 0.
   * An animation will change this value.
   */
  --angle: 0;

  /* Ignore completed whole rotations */
  --trim: mod(var(--angle), 360);
  /* If each symbol is in a position from 0 <= place < 20,
   * where is the first symbol now?
   */
  --place: calc(var(--trim) / var(--arc));
  /* What fraction of a symbol size has it moved past the last
   * resting symbol position?
   */
  --fraction: mod(var(--place), 1);
  /* How many complete symbol positions has it moved? */
  --turn:  calc(var(--place) - var(--fraction));
  /* What angle of rotation does this fraction represent? */
  --twist: calc(var(--fraction) * var(--arc));
  /* What index number should the list start with, in order to
   * push the first symbol into its --turn position?
   */
  --first: mod(
    calc(var(--total) - var(--turn)), var(--total)
  );

  /* animation-duration: 1.6s; */

  li::before {
    content: counter(index, fruit-two);
  }
}
.buttons:has(#two:checked) ~ .reels .two {
  animation-name: var(--two);
}

ol.three {
  /* The drum will rotate, starting at an angle of 0.
   * An animation will change this value.
   */
  --angle: 0;

  /* Ignore completed whole rotations */
  --trim: mod(var(--angle), 360);
  /* If each symbol is in a position from 0 <= place < 20,
   * where is the first symbol now?
   */
  --place: calc(var(--trim) / var(--arc));
  /* What fraction of a symbol size has it moved past the last
   * resting symbol position?
   */
  --fraction: mod(var(--place), 1);
  /* How many complete symbol positions has it moved? */
  --turn:  calc(var(--place) - var(--fraction));
  /* What angle of rotation does this fraction represent? */
  --twist: calc(var(--fraction) * var(--arc));
  /* What index number should the list start with, in order to
   * push the first symbol into its --turn position?
   */
  --first: mod(
    calc(var(--total) - var(--turn)), var(--total)
  );

  /* animation-delay: 300ms; */
  /* animation-duration: 4s; */

  li::before {
    content: counter(index, fruit-three);
  }
}
.buttons:has(#three:checked) ~ .reels .three {
  animation-name: var(--three);
}

ol {
  position: relative;
  margin: 0;
  height: var(--diameter);
  width: var(--size);
  background: var(--drum);
  list-style: none;
  margin-right: 1vw;

  counter-set: index var(--first);

  /* animation-name: spin; */
  animation-duration: 1s;
  animation-fill-mode: forwards;
  animation-iteration-count: 1; /* infinite; */

  /* Place a shadow gradient over the list items */
  &::after {
    content: "_";
    display: inline-block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    color: #0000;
    background: var(--shadow);
  }

  li {
    position: absolute;
    left: 0;
    top: var(--shift);
    counter-increment: index;

    transform-origin: 0 50% var(--radius);
  }

  li:nth-child(1) {
    transform: rotateX(calc((var(--twist) - 100) * 1deg))
  }

  li:nth-child(2) {
    transform: rotateX(calc((var(--twist) - 80) * 1deg))
  }

  li:nth-child(3) {
    transform: rotateX(calc((var(--twist) - 60) * 1deg))
  }

  li:nth-child(4) {
    transform:rotateX(calc((var(--twist) - 40) * 1deg))
  }

  li:nth-child(5) {
    transform:rotateX(calc((var(--twist) - 20) * 1deg))
  }

  li:nth-child(6) {
    transform: rotateX(calc(var(--twist) * 1deg))
  }

  li:nth-child(7) {
    transform: rotateX(calc((var(--twist) + 20) * 1deg))
  }

  li:nth-child(8) {
    transform: rotateX(calc((var(--twist) + 40) * 1deg))
  }

  li:nth-child(9) {
    transform: rotateX(calc((var(--twist) + 60) * 1deg))
  }

  li:nth-child(10) {
    transform: rotateX(calc((var(--twist) + 80) * 1deg))
  }

  li::before {
    font-size: var(--size);
    position: absolute;
    transform: translateX(40%);
  }
}
ol:last-of-type {
  margin: 0;
}

p.mood {
  position: absolute;
  margin: 0;
  left: 0;
  top: 8px;
  font-size: 73px;
}
p.mood::after {
  content: counter(mood, mood);

}

a.refresh {
  position: absolute;
  right: 0;
  top: 48px;
  width: 73px;
  height: 24px;
  text-align: center;
  color: #ddd;
  text-decoration: none;
  background-color: #060;
  border: 1px outset #090;
  border-radius: 8px;

  &:hover {
    color: #fff;
  }
  
  &:hover:active {
    border-style: inset;
    background-color: #030;
  }
}
/* pre.angle {
  counter-set: angle var(--angle);
  &::after {
    content: "≅" counter(angle);
  }
}

pre.total {
  counter-set: total var(--total);
  &::after {
    content: counter(total);
  }
}

pre.arc {
  counter-set: arc var(--arc);
  &::after {
    content: counter(arc);
  }
}

pre.trim {
  counter-set: trim calc(var(--trim) * 100);
  &::after {
    content: counter(trim) "/100";
  }
}

pre.place {
  counter-set: place calc(var(--place) * 100);
  &::after {
    content: counter(place) "/100";
  }
}

pre.fraction {
  counter-set: fraction calc(var(--fraction) * 100);
  &::after {
    content: counter(fraction) "/100";
  }
}

pre.turn {
  counter-set: turn var(--turn);
  &::after {
    content: counter(turn);
  }
}

pre.twist {
  counter-set: twist calc(var(--twist) * 100);
  &::after {
    content: counter(twist) "/100";
  }
}

pre.first {
  counter-set: first var(--first);
  &::after {
    content: counter(first);
  }
} */

/* Show the GitHub logo */
a.github {
  width: 0;
  height: 0;

  img {
    position: absolute;
    right: 3px;
    bottom: 3px;
    width: 32px;
    height: 32px;
    filter: grayscale(1);
    opacity: 0.25;

    &:hover {
      opacity: 1;
    }
  }
}


@keyframes spin {
    0% { --angle:  0; }
   10% { --angle:  4; }
   20% { --angle:  8; }
   30% { --angle: 12; }
   40% { --angle: 16; }
   50% { --angle: 20; }
   60% { --angle: 24; }
   70% { --angle: 28; }
   80% { --angle: 32; }
   90% { --angle: 36; }
  100% { --angle: 40; }
}
@keyframes final {
    0% { --angle: 0; }
   10% { --angle: 6; }
   20% { --angle: 12; }
   30% { --angle: 18; }
   40% { --angle: 24; }
   50% { --angle: 30; }
   60% { --angle: 36; }
   70% { --angle: 42; }
   80% { --angle: 48; }
   90% { --angle: 54; }
  100% { --angle: 60; }
}